# Configuration file for python scripts to create CH maps and extract TAP parameters from AIA science level 2 images for the rob_spoca_ch TAP service

[DEFAULT]
# Base directories to use as variable in paths
SPOCA_BIN = /home/benjmam/spoca4tap/SPoCA/bin
SPOCA_CONFIG = /home/benjmam/spoca4tap/configs
OUTPUT = /scratch/benjmam/spoca4tap/rob_spoca_ch

# Section to select good quality AIA FITS files
[AIA_DATA]

# Directory where the AIA data is located, will be used as base for inferring the URL with aia_image_base_url
base_dir = /scratch/benjmam/aia_science_level2

# Pattern that accepts a date and wavelength of where the AIA FITS files are located
file_pattern = %(base_dir)s/{wavelength:04d}/{date.year:04d}/{date.month:02d}/{date.day:02d}/AIA.{date.year:04d}{date.month:02d}{date.day:02d}_{date.hour:02d}*.{wavelength:04d}.*.fits

# HDU index of AIA FITS file that contains the QUALITY keyword
hdu_index = 1

# Quality bits that can be ignored
ignore_quality_bits = 0, 1, 2, 3, 4, 8

# Section to select good quality HMI FITS files
[HMI_DATA]

# Directory where the HMI data is located, will be used as base for inferring the URL with hmi_image_base_url
base_dir = /data/SDO/AIA_HMI_1h_synoptic/hmi.m_45s.prepped

# Pattern that accepts a date of where the HMI magnetogram FITS files are located
file_pattern = %(base_dir)s/{date.year:04d}/{date.month:02d}/{date.day:02d}/HMI.{date.year:04d}{date.month:02d}{date.day:02d}_{date.hour:02d}*.*.fits

# HDU index of HMI FITS file that contains the QUALITY keyword
hdu_index = 0

# Quality bits that can be ignored
ignore_quality_bits = 0, 1, 2, 3, 4, 8

# Section to Execute the SPoCA classification executable on AIA data to compute the class centers
[GET_CLASS_CENTERS]

# Path to the classification program
executable = %(SPOCA_BIN)s/ch_classification.x

# Path to the config file of the classification program
config_file = %(SPOCA_CONFIG)s/ch_classification.config

# Wavelengths of the AIA images on which to run the classification program
aia_wavelengths = 193

# Path to the class centers file (accept a {date} placeholder)
output_file = %(OUTPUT)s/class_centers/{date}.class_centers.txt

# Section to execute the SPoCA attribution executable on AIA data to create a segmentation map
[GET_SEGMENTATION_MAP]

# Path to the attribution program
executable = %(SPOCA_BIN)s/ch_attribution.x

# Path to the config file of the attribution program
config_file = %(SPOCA_CONFIG)s/ch_attribution.config

# Path to the centers file (accept a {date} placeholder)
centers_file = %(OUTPUT)s/median_class_centers.txt

# Wavelengths of the AIA images on which to run the attribution program
aia_wavelengths = 193

# Path to the segmentation map (accept a {date} placeholder)
output_file = %(OUTPUT)s/segmentation_map/{date}.segmentation_map.fits

# Section to execute the SPoCA get_CH_map executable on a segmentation map to create a ch map
[GET_REGION_MAP]

# Path to the get_CH_map program
executable = %(SPOCA_BIN)s/get_ch_map.x

# Path to the config file of the get_CH_map program
config_file = %(SPOCA_CONFIG)s/get_ch_map.config

# Wavelength of the AIA image on which to compute the stats
aia_wavelength = 193

# Path to the full ch map (accept a {date} placeholder)
output_file = %(OUTPUT)s/full_ch_map/{date}.ch_map.fits

# Section to execute the SPoCA tracking executable on ch maps
[GET_TRACKED_MAP]

# Path to the tracking program
executable = %(SPOCA_BIN)s/tracking.x

# Path to the config file of the tracking program
config_file = %(SPOCA_CONFIG)s/tracking.config

# Number of maps used for the overlap between successive calls to tracking
# Depends on the maxDeltaT of the config_file and the interval used between 2 maps
overlap_count = 6

# Maximum number of maps to run the tracking at each successive call
# Depends on the size of the maps and the size of the RAM of the computer
group_count = 100

# Section to extract the longlived regions from tracked ch maps
[LIFESPAN_CLEANING]

# Name of the HDU containing the table of regions info
region_hdu_name = Regions

# Minimum lifespan of a region to be kept
min_lifespan = 3 days

# Name of the HDU containing the image
image_hdu_name = CoronalHoleMap

# Path to the cleaned ch map (accept a {date} placeholder)
output_file = %(OUTPUT)s/ch_map/{date}.ch_map.fits

# Section to execute the SPoCA overlay executable on a ch map to create an overlay image
[GET_OVERLAY_IMAGE]

# Path to the overlay program
executable = %(SPOCA_BIN)s/overlay.x

# Path to the config file of the overlay program
config_file = %(SPOCA_CONFIG)s/overlay.config

# Wavelength of the AIA image on which to overlay the CH map
aia_wavelength = 193

# Directory for the output file of the overlay program
output_file = %(OUTPUT)s/ch_map_overlay/{date}.ch_map.png

# Section to extract the TAP parameters
[TAP_PARAMETERS]

# Base URL where the maps are accessible, the file name of the map will be appended
map_base_url = https://spoca.oma.be/spoca4tap/rob_spoca_ch/ch_map/

# Base URL where the map overlays are accessible, the file name of the map overlay will be appended
map_overlay_base_url = https://spoca.oma.be/spoca4tap/rob_spoca_ch/ch_map_overlay/

# Base URL where the aia FITS files are accessible, the relative path of the file to aia_image_base_dir will be appended
aia_image_base_url = http://sdo.oma.be/data/aia_science_level2/

# Relative directory of the path to the aia FITS file
aia_image_base_dir = /scratch/benjmam/aia_science_level2

# Base URL where the aia FITS files are accessible, the relative path of the file to hmi_image_base_dir will be appended
hmi_image_base_url = http://sdo.oma.be/data/AIA_HMI_1h_synoptic/hmi.m_45s.prepped/

# Relative directory of the path to the hmi FITS file
hmi_image_base_dir = /data/SDO/AIA_HMI_1h_synoptic/hmi.m_45s.prepped

# Base URL where the provenance files are accessible, the file name will be appended
provenance_base_url = https://spoca.oma.be/spoca4tap/rob_spoca_ch/provenance/

# Path to the TAP parameters files (accept a {date} placeholder)
epn_core_output_file = %(OUTPUT)s/tap_parameters/{date}.epn_core.csv
tracking_output_file = %(OUTPUT)s/tap_parameters/{date}.tracking.csv
datalink_output_file = %(OUTPUT)s/tap_parameters/{date}.datalink.csv


# Section to save provenance information
[PROVENANCE]

# Directory where to save activity provenance info
output_directory = %(OUTPUT)s/provenance/
